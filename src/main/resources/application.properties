# NOTE ilker default port for the built in app server to steart is 8080
# HTTP port below
#server.port=8889
# HTTPS port below
server.port=8890

spring.h2.console.enabled=true
spring.h2.console.path=/h2_console
spring.datasource.url=jdbc:h2:file:~/h2/testdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver

# NOTE ilker, to access h2_console via browser with above values go to (assuming using HTTPS with server.port=8890)
#  https://localhost:8890/h2_console
#  if self signed SSL certificate was not "accepted" before by browser, go through "Advanced" and then "continue"
#  Since h2 console runs as part of app, h2_console/** is protected by Spring Security, and since it is configured to require "ADMIN" role, it will redirect(302) to /login, login as a user that "ADMIN" role, then you will be directed to h2_console url and everything will work. If you login as another user that does not have "ADMIN" role, you will get "Access Denied"(403 template)
#   in "Login" page of h2, keep below custom values
#    Driver Class: org.h2.Driver
#    JDBC URL: jdbc:h2:file:~/h2/testdb
#    User Name: sa
#    Password:       (leave it empty)
#   click "Connect"  (can 1st click "Test Connection" to get green "Test successfull" at bottom)
#   then click on the table "CUSTOMER" on left hand side, click "Run" button in "SQL statement" tab to see rows in table


#spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# NOTE ilker hibernate generates&executes below schema SQL for JPA Entity Customer. NOTE it also creates "hibernate_sequence" due to "@GeneratedValue(strategy = GenerationType.AUTO)" setting for id
# Hibernate: drop table customer if exists
# Hibernate: drop sequence if exists hibernate_sequence
# Hibernate: create sequence hibernate_sequence start with 1 increment by 1
# Hibernate: create table customer (id bigint not null, firstname varchar(255), lastname varchar(255), primary key (id))

## BEF Spring Security "default auto config" values
# NOTE ilker "user" is the default user.name for "spring security default configuration"
#spring.security.user.name=user
# NOTE ilker with "spring security default configuration", by default a random password is generated and printed in log statement in console. But it can be fixed like below
#spring.security.user.password=user
## EOF Spring Security "default auto config" values

## BEF HTTPS SSL certificate param values - NOTE ilker they need match what you used during generation of certificate (see README)
## NOTE ilker below settings assume you created "self signed SSL certificate" at DOS prompt opened as "administrator" in src/main/resources/certificates4https dir, using keytool(which is in java jdk bin) via below
# keytool -genkey -alias exp17d -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore exp17d.p12 -validity 3650 
server.ssl.enabled=true
server.ssl.key-store=src/main/resources/certificates4https/exp17d.p12
server.ssl.key-store-password=password
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=exp17d
## EOF HTTPS SSL certificate param values

# BEF my application specific "value"s
#mh.security.authserver.addRolesAsGrantedAuthority2privileges=true

#NOTE ilker starting with Spring 5, which spring-boot-starter-parent 2.x uses, have to use a password encoder 
#     otherwise password check will fail with below WARN message in logs (console)
#     WARN BCryptPasswordEncoder "Encoded password does not look like BCrypt"
#     So when spring-boot-starter-parent version is 2.x, then make sure to set below "mh.security.authserver.BCryptPasswordEncoder.usedToEncodePassword=true" in application.properties
mh.security.authserver.BCryptPasswordEncoder.usedToEncodePassword=true
mh.security.authserver.BCryptPasswordEncoder.strength=10

#mh.security.authserver.jwt.privateKeyResourcePath=rsaKey/rsaKey4jwtRS256.key.private
#mh.security.authserver.jwt.publicKeyResourcePath=rsaKey/rsaKey4jwtRS256.key.public

# jwt token creation specific params
#mh.security.authserver.jwt.clientId=MhWebJwtClientId
#mh.security.authserver.jwt.clientSecret=MhSecret
#mh.security.authserver.jwt.accessTokenValiditySeconds=20000
#mh.security.authserver.jwt.refreshTokenValiditySeconds=20000

# EOF my application specific "value"s

